* Cấu trúc CSS: Selector:{property:value;}

* Mức độ ưu tiên của selector (khi style trùng nhau) theo thứ tự giảm dần: Inline style, ID selector, Class selector, Element selector. Ngoài ra nếu selector giống nhau thì cái viết sau sẽ đè lên cái trước và cái nào chi tiết hơn thì sẽ có mức ưu tiên cao hơn.

* Có thể sử dụng thêm thuộc tính !important để đẩy mức ưu tiên của selector lên cao nhất.

* Thẻ <a> :
	+ target : - _blank : mở 1 liên kết trong tab mới.
			   - _self : Mặc định.
			   - _parent : 
			   - _top :
			   - framename :

	+ Link Color: - a:link : 1 liên kết mặc định.
				  -	a:visited : Liên kết mà người dùng đã truy cập.
				  - a:hover : 1 liên kết khi người dùng rê chuột qua.
				  - a:active : 1 liên kết ngay khi nhấp chuột vào.

	+ Nguyên tắc : - a:hover phải đi sau a:link và a:visited.
				   - a:active phải đến sau a:hover.

* Css Box Model : Bao gồm Margin,Border,padding và nội dung bên trong.

* Css Outline : Là 1 đường kẻ vẽ xung quanh các border để làm nổi bật phần tử.

* CSS Vertical-align : Sắp xếp các nội dung theo chiều dọc.

* Nếu so sánh mức độ nhấn mạnh thì thẻ <strong> có tác dụng nhấn mạnh hơn là thẻ <em>.

* Khi đặt tên class và id, không được bắt đầu bởi 1 số và dùng tiếng Việt có dấu.

* Để quy định kích thước font chữ ta dùng thuộc tính font-size, để quy định chiều cao của 1 dòng ta dùng thuộc tính line-height.

* Thay đổi hướng chữ bằng thuộc tính direction, ví dụ direction:rtl

* Để tạo icon cho trang web (icon nhỏ xuất hiện ở trên tab của trình duyệt) ta dùng thẻ link như sau (ảnh icon thường có kich thước là 16x16 pixels hoặc 32x32 pixels, định dạng là PNG, GIF hoặc ICO).

* Với thuộc tính rel của thẻ <a>: Giá trị là nofollow được sử dụng bởi Google để đánh dấu rằng google sẽ không đọc theo và đánh index các link đó. Với các link mà bạn không muốn hoặc không rõ trang được liên kết đến thì nên đặt thuộc tính này (vi du như link đến trang đăng nhập, đăng ký, hay link do người dùng post lên ở các phần comment, …)

* Khi sử dụng thẻ <a> thường chỉ cần style 2 màu là màu khi hover và các màu còn lại.

* Pseudo Element cũng có thể chỉ cần dùng 1 dấu " : " cũng chạy được (chuẩn CSS1 và CSS2). Tuy nhiên chúng ta nên viết là " :: " theo đúng chuẩn của CSS3  để phân biệt giữa pseudo-class và pseudo-element.

* Padding : giãn cách nội dung với viền của element.

* Margin : Giãn cách giữa các elenment với nhau.

* Nên sử dụng box-sizing:border-box cho toàn bộ element trong trang để style cho dễ : kích thước thật = kích thước lý thyết
	*{
		box-sizing: border-box;
	}

* Display: Làm thay đổi cách thức hiển thị của 1 phần tử.
	+ inline : <a>,<img>,<span>.. Không bắt đầu trên 1 dòng mới và chỉ chiếm tối đa chiều rộng nếu cần.
	+ Block : <div>,<h1>-<h6>,<p>,<form>,<header>,<footer>,<section>...luôn luôn bắt đầu trên 1 dòng và chiếm toàn bộ chiều rộng có sẵn.
	+ Điểm khác nhau giữa Block và inline :
		- Block chấp nhận thuộc tính width và height ,inline thì không.
		- Block có chiều rộng mặc định là 100%, inline thì có chiều rộng bằng nội dung bên trong.
		- Margin,Padding khi áp dụng cho inline chỉ làm giãn khoảng cách theo chiều ngang, Block thì cả 2 chiều.

	+ Inline-block : 1 phần tử inline nhưng có thể áp dụng thuộc tính width,height như Block.
	+ None : Ẩn phần tử đi,thường dùng trong JS.
	+ Để ẩn một phần tử ta cũng có thể dùng thuộc tính visibility: hidden; . Tuy nhiên thuộc tính này khác với display: none; ở chỗ nó chỉ làm chúng ta không nhìn thấy phần tử, nhưng nó vẫn chiếm chỗ trong layout còn display: none; thì làm phần tử biến mất hẳn khỏi layout.
	+ Thông thường để căn chỉnh 1 phần tử ra giữa theo chiều ngang với inline (text, image) thì ta dùng text-align: center cho phần tử cha của nó, còn với block thì ta dùng margin: auto .

* Position : Xác định thiết lập vị trí cho các phần tử trong HTML.
	
	+ Position:static : Mặc định.

	+ Position:relative : Định vị tương đối so với vị trí bình thường của nó.

	+ Position:fixed : Định vị tương đối so với khung,nó luôn ở trong cùng 1 vị trí ngay cả khi trang cuộn.

	+ Position:absolute : Định vị tương đối với lớp cha gần nhất thay vì so với khung như mặc định.

	+ Position:sticky : Định vị dựa trên vị trí cuộn của người dùng.	

	+ Khi sử dụng thuộc tính position với giá trị là absolute thì ta nên cho thẻ cha gần nhất làm mốc bằng cách đặt thuộc tính position: relative (có thể đặt bất kỳ position nào ngoài static tuy nhiên dùng relative sẽ ít ảnh hưởng đến layout).
	
	+ Khi sử dụng thuộc tính position với giá trị là absolute hoặc fixed, các phần tử sẽ đè lên nhau (theo trục z, hướng vuông góc với màn hình). Và để xác định mức độ ưu tiên phần tử nào sẽ ở bên trên (theo hướng nhìn của người dùng) ta sẽ sử dụng thuộc tính z-index (chúng ta sẽ nhìn thấy phần tử bên trên che khuất phần tử bên dưới trừ khi nó có background trong suốt). z-index nhận giá trị là các số (có thể nhận số âm) và số nào càng cao thì ưu tiên càng cao (ví d phần tử có z-index là 2 sẽ đè lên phần tử có z-index là 1).

* CSS float: Được sử dụng để định vị và bố trí trên trang web.

	- 1 phần tử float sẽ làm cho phần tử không float đằng sau nó chồng lên,có thể gây ra hiệu quả không mong muốn.
	- Để tránh hiện tượng trên.dùng thuộc tính clear cho phần tử k float :
		.clear{
			clear: both;
		}
		+ clear both ngăn k cho float cả 2 phía,nó cũng có thể nhận các giá trị như : left(chỉ ngăn k cho float bên trái),right(ngăn k cho float bên phải).
		+ Thuộc tính này được dùng khá nhiều trong các trang web và thường được đặt trong 1 class chung(vd:.clear,.clearfix..) để tiện sử dụng tại nhiều trang khác nhau.
	- Ngoài ra nếu 1 phần tử k float nhưng toàn bộ phần tử con lại dùng float thì chiều cao của phần tử cha sẽ = 0,và các phần tử bên dưới sẽ chồng lên nó.Để khắc phục dùng:
		+ Chèn thêm 1 thẻ DIV rỗng vào cuối nội dung phần tử cha(hoặc sử dụng pseudo class ::after) và đặt thuộc tính clear.
		+ Sử dụng thuộc tính Display:table cho phần tử cha(cần đặt chiều rộng phù hợp).
		+ Sử dụng thuộc tính overflow:auto cho phần tử cha.

* CSS Clear : Cho phép xác định những phần tử nào có thể nổi bên cạnh phần tử đã được xóa và vị trí của nó.
	
	+ Nên sử dụng Clearfix hack để kiểm soát nội dung không bị tràn ra ngoài :

		.clearfix::after {
		    content: "";
		    clear: both;
		    display: table;
		}

* CSS Display :
	+ display:inline : Chuyển phần tử về hiển thị cùng 1 hàng.
	+ display:inline-block : Chuyển phần tử về hiển thị trên cùng 1 hàng nhưng nó vẫn thừa hưởng các đặc tính của block như có thể tùy chỉnh kích thước,thêm background ....
	+ display:block : chuyển phần tử về hiển thị kiểu block,sở hữu 1 hàng riêng. 

* Transition : Thuộc tính làm cho phần tử thay đổi thuộc tính của nó 1 cách từ từ trong 1 thời gian xác định.

	+ transition-timing-function : Xác định đường cong tốc độ của hiệu ứng.
		- transition-timing-function:ease : khởi đầu chậm sau đó nhanh dần rồi kết thúc từ từ.
		- transition-timing-function:linear : chuyển tiếp cùng tốc độ từ đầu đến cuối.
		- transition-timing-function:ease-in : chuyển tiếp với khởi động chậm.
		- transition-timing-function:ease-out : chuyển tiếp với kết thúc chậm.
		- transition-timing-function:ease-in-out : Chuyển tiếp với khởi đầu và kết thúc chậm.

	+ transition-delay : Xác định thời gian chậm trễ cho hiệu ứng chuyển tiếp.

	+ transition-duration : Xác định thời gian 1 hiệu ứng chuyển tiếp cần để hoàn thành.

	+ transition-property : Xác định tên của thuộc tính css cho hiệu ứng chuyển tiếp.


* Opacity : Xác định độ trong suốt của 1 phần tử.
	+ Thuộc tính opacity mang tính kế thừa, tức là nếu element cha có opacity là 0.8 thì element con sẽ có opacity mặc định là 0.8. Khi đó nếu lại set opacity của element con là 0.5 vậy opacity thực tế sẽ là 0.8 x 0.5 = 0.4

* Transform : Xác định 1 chuyển đổi 2 chiều,3 chiều,có thể là xoay,tỷ lệ,di chuyển,nghiêng...

* CSS Overflow : Xác định điều xảy ra nếu nội dung tràn khỏi 1 khối phần tử.
	+ overflow:visible : Mặc định.

	+ overflow:hidden : Lỗi tràn bị cắt bớt,phần còn lại của nội dung không thấy dc.

	+ overflow:scroll : lỗi tràn bị cắt bớt nhưng xuất hiện 1 thanh cuộn để xem phần còn lại của nội dung.

	+ overflow:auto : nếu bị tràn sẽ tự xuất hiện thanh cuộn.

	+ overflow:initial : trả về giá trị mặc định.

	+ overflow:inherit : 

* Box-shadow : Gắn bóng của phần tử.

* Animation : Cho phép phần tử thay đổi từ phong cách này sang phong cách khác.
	+ animation-name : Tên phần tử.

	+ animation-duration : Thời gian cần hoàn thành.

	+ animation-delay : Thời gian chậm trễ cho sự bắt đầu của 1 animation.

	+ animation-iteration-count : Xác định số lần 1 animation nên chạy.

	+ animation-direction : Xác định 1 animation phải được phát chuyển tiếp,quay ngược hoặc 1 chu kỳ thay thế.
		- animation-direction:normal : phát như bình thường.
		- animation-direction:reverse : phát theo chiều ngược lại.
		- animation-direction:alternate : phát trước sau đó ngược lại.
		- animation-direction:alternate-reverse : chơi ngược trở lại đầu tiên sau đó chuyển tiếp.

	+ animation-timing-function : Xác định đường cong tốc độ cho animation.
		- animation-timing-function:ease : xác định 1 animation với khởi động chậm sau đó nhanh và kết thúc chậm.
		- animation-timing-function:linear : Xác định 1 animation có cùng tốc độ từ đầu đến cuối.
		- animation-timing-function:ease-in : khởi đầu chậm.
		- animation-timing-function:ease-out : kết thúc chậm.
		- animation-timing-function:ease-in-out : khởi đầu và kết thúc đều chậm.


/* JAVASCRIPT */

* Alert: Hiển thị lên 1 hộp thoại thông báo trên trình duyệt.
* Console.log(): Tương tự như Alert nhưng chỉ hiện thị trong màn hình console.
* JS có thể hiển thị dữ liệu bằng nhiều cách khác nhau:
	+ innerHTML : viết trong 1 phần tử HTML.(document.getElementById(id).innerHTML)(id:định nghĩa phần tử HTML,innerHTML:định nghĩa nội dung HTML).
	+ document.write() : viết trong 1 đầu ra HTML.
	+ window.alert() : Viết vào 1 hộp cảnh báo.
	+ console.log() : viết vào bảng console.
* Các câu lệnh JS bao gồm: Values(giá trị),Operator(Toán tử),Expressions(Biểu thức),Keywords(từ khóa) và comments().
* Biến: Nơi lưu trữ giá trị dữ liệu.
	+ JS sử dụng từ khóa var để khai báo biến.

	+ Quy tắc đặt tên biến trong JS:
		- Chứa các ký tự chữ,số,_ và $.
		- Ký tự đầu tiên không được là số(nên là chữ).
		- Có phân biệt hoa thường.
		- Không trùng với các từ khóa của JS:For,While,This,....
		- Nên đặt tên theo kiểu snake_case hoặc camelCase nếu tên biến có độ dài 2 từ trở lên cho dễ đọc.

	+ Cú pháp viết tắt khi gán giá trị cho biến nếu biến có kiểu dữ liệu số:
		- x=x+1 --> x++
		- x=x-1 --> x--
		- x=x+5 --> x+=5
		- x=x-5 --> x-=5
		- x=x/5 --> x/=5
		- x=x*5 --> x*=5

* Keywords JS:
	+ break : kết thúc 1 switch(chuyển đổi) hoặc 1 loop(vòng lặp).
	+ continue : Nhảy khỏi vòng lặp và bắt đầu lại từ đầu.
	+ debugger : Ngừng thực hiện JS,gọi các chức năng gỡ lỗi.
	+ do...while : Thực hiện 1 khối lệnh,lặp lại khối trong khi điều kiện là đúng.
	+ for : Đánh dấu 1 khối lệnh để thực hiện,miễn có 1 điều kiện là đúng.
	+ function : Khai báo 1 hàm.
	+ if...else : Đánh dấu 1 khối lệnh để thực hiện,tùy thuộc vào điều kiện.
	+ return : Thoát khỏi hàm.
	+ switch : Đánh dấu 1 khối lệnh để thực hiện,tùy thuộc các trường hợp khác nhau.
	+ try...catch : Thực hiện xử lý lỗi đối với 1 khối các câu lệnh.
	+ var : Khai báo 1 biến.

* Data Type(kiểu dữ liệu) : 
	+ Các biến JS có thể chứa nhiều loại dữ liệu : numbers(số),string(chuỗi),object(đối tượng)...
	+ Khi thêm 1 số và 1 chuỗi,JS sẽ coi số là 1 chuỗi.
	+ JS đánh giá các biểu thức từ trái sang phải.
	+ JS là 1 kiểu Dynamic(động): cùng 1 biến có thể được sử dụng để chứa các kiểu dữ liệu khác nhau.
	+ Số có thể chia làm 2 loại: 
		- Interger(số nguyên)
		- Float(số thập phân): dùng dấm chấm chứ k dùng dấu phẩy.
	+ 1 phép toán số học k hợp lệ sẽ trả về dữ liệu là NaN(NOT A NUMBER),kiểu dữ liệu là number.
	+ Ký tự ngoặc đơn hoặc ngoặc kép là ký tự đặc biệt dùng để tạo ra chuỗi, cho nên nếu trong 1 chuỗi có chứa ký tự ngoặc đơn thì chúng ta dùng ngoặc kép để tạo chuỗi và ngược lại.Ngoài ra chúng ta có thể thêm ký tự  \  đằng trước để đánh dấu rằng đây là ký tự đặc biệt cần hiển thị (escape character).
	+ Khi một biến được khai báo mà chưa gán giá trị, nó sẽ có kiểu là undefined. Trong trường hợp một biến đã có giá trị và chúng ta muốn bỏ giá trị đó đi ta dùng kiểu dữ liệu là null chứ không gán lại thành undefined.
	+ Từ Khóa typeof : xác định kiểu của 1 biến.
	+ Array(mảng):
		- Trong 1 mảng số thứ tự bắt đầu tính từ 0.
		- Khi sử dụng typeof với 1 array chúng ta sẽ nhận được kết quả là "object" do array cũng là 1 object trong Javascript.Để kiểm tra 1 biến có phải là array hay không chúng ta sử dụng phương thức isArray().
		- Array và Object là 2 kiểu dữ liệu đặc biệt,nó có thuộc tính tham chiếu nên sẽ không thể sao chép như biến thông thường.
		- Để copy 1 mảng dùng phương thức slice().
		- Với Object, chúng ta có thể khai báo theo kiểu function tương tự như Class ở các ngôn ngữ khác để có thể tái sử dụng các thuộc tính và phương thức.
		- Trong khi trao đổi dữ liệu giữa các ngôn ngữ khác nhau, người ta thường sử dụng 1 kiểu dữ liệu gọi là JSON (JavaScript Object Notation) dựa trên object trong Javascript.